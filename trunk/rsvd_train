#!/usr/bin/python
"""A script to train a regularized SVD model
on a given numpy record array. The data type is assumed to 
be rsvd.rating_t. A struct containing an uint16, an uint32 and an uint8.
"""
import sys
import getopt
import numpy as np

from rsvd import RSVD,rating_t

__version__="0.1"
__author__="peter.prettenhofer@gmail.com"
__license__="mit"


class Usage(Exception):
    def __init__(self, msg):
        self.msg = msg

def usage():
    print """Usage: rsvd_train [options] training_array nmovies nusers output_dir
Trains a regularized SVD solver on the given training data and stores the 
trained model in <output_dir>. The training data is assumed to be 
a serialized numpy record array. nmovies and nusers are the number 
of movies and users, resp., in the data set. 
See <http://code.google.com/p/pyrsvd/> for 
further information. 

Options: 
  -h, --help\tPrint this help
  -v, --verbose\tVerbose output
  -l, --lr\tLearn rate [default: 0.001]
  -r, --reg\tRegularization parameter [default: 0.11]
  --probe <file>\tEstimate error on probe set. 
\t\t<file> contains the probe set in a numpy record array.
\t\tIf defined, early stopping is turned on
  --maxepochs\tThe max number of epochs to perform

For bug reporting, please mail to:
<peter.prettenhofer@gmail.com>
"""


def main(argv=None):
    if argv is None:
        argv = sys.argv
    try:
        try:
            opts, args = getopt.getopt(argv[1:], "hl:r:f:e:R", \
                                           ["help","probe=","lr=","reg=",\
                                                "factors=","maxepochs=",\
                                                "randomize"])
        except getopt.error, msg:
             raise Usage(msg)
        
        output = None
        lr=0.001
        reg=0.011
        probeFile=None
        ratingsFile=None
        output=None
        max_epochs=100
        randomize=False
        factors=10
        for o, a in opts:
            if o in ("-h", "--help"):
                usage()
                sys.exit()
            elif o in ("--probe"):
                probeFile=a
            elif o in ("-l","--lr"):
                lr=float(a)
            elif o in ("-r","--reg"):
                reg=float(a)
            elif o in ("-f","--factors"):
                factors=int(a)
            elif o in ("-e","--maxepochs"):
                max_epochs=int(a)
            elif o in ("-R","--randomize"):
                randomize=True
            else:
                raise Usage("unhandled option")
        
        if len(args) < 4:
            raise Usage("missing arguments")
        try:
            ratingsFile=open(args[0],'r')
            nmovies=int(args[1])
            nusers=int(args[2])
            output=args[3]
            print >>sys.stdout, "Loading training data...",
            ratingsArray=np.fromfile(ratingsFile,dtype=rating_t)
            print >>sys.stdout, "done."
            probeArray=None
            if probeFile:
                print >>sys.stdout, "Loading probe data...",
                probeArray=np.fromfile(file(probeFile),dtype=rating_t)
                print >>sys.stdout, "done."
            model=RSVD.train(factors,ratingsArray,(nmovies,nusers),\
                             probeArray=probeArray,\
                             maxEpochs=max_epochs,\
                             minImprovement=0.000001,\
                             learnRate=lr,\
                             regularization=reg,\
                             randomize=randomize)
            
            model.save(output)
        except Exception, e:
            print >>sys.stderr, "Error: ",e
        
    except Usage, err:
        print >>sys.stderr, err.msg
        usage()
        return 2

if __name__ == "__main__":
    sys.exit(main())
